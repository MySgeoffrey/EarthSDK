//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 蚂蚁空间信息平台
//  @ File Name : isceneobject.h
//  @ Date : 2017/8/21
//  @ Author : 
//
//


#if !defined(_ISCENEOBJECT_H)
#define _ISCENEOBJECT_H

#include "framework/common/iobject.h"
#include "framework/common/iserialisable.h"
#include <osgEarth/MapNode>
#include <osg/Lod>
#include <osgEarthSymbology/Style>

namespace Common
{
	/// <summary>
	/// ISceneObject类：场景对象，场景渲染对象基类，
	/// 为地球场景中可渲染的对象接口类
	/// </summary>
	class VR_PIPEFRAMEWORK_EXPORT ISceneObject 
		: public IObject, public ISerialisable
    {
    public:

		enum SceneObjectState
		{
			//无状态
			SOS_NONE,

			//加载状态
			SOS_LOAD,

			//卸载状态
			SOS_UNLOAD,

			//渲染状态
			SOS_RENDER,

			//反挂接状态
			SOS_DERENDER,

			//编辑状态
			SOS_EDITING,
		};

		/// <summary>
		/// 构造函数
		/// </summary>
		ISceneObject();

		/************************************************************************/
		/* 构造函数
		pRefMapNode:场景地图节点
		*/
		/************************************************************************/
		ISceneObject(osgEarth::MapNode* pRefMapNode);

		/// <summary>
		/// 关联场景节点
		/// </summary>
		/// <param name="pRefMapNode">场景节点</param>
		virtual void setMapNode(osgEarth::MapNode* pRefMapNode);

		/// <summary>
		/// 获取场景节点
		/// </summary>
		virtual osgEarth::MapNode* getMapNode();

		/************************************************************************/
		/* 析构函数
		
		*/
		/************************************************************************/
		virtual ~ISceneObject();

		/// <summary>
		/// 设置渲染对象状态 
		/// </summary>
		/// <param name="state">对象状态</param>
		virtual void setState(const Common::ISceneObject::SceneObjectState& state);

		/// <summary>
		/// 获取渲染对象状态 
		/// </summary>
		virtual Common::ISceneObject::SceneObjectState getState();

		/************************************************************************/
		/* 获取或创建LOD信息
		needCreate：指示是否需要创建LOD信息
		*/
		/************************************************************************/
		virtual osg::LOD* getOrCreateLod(const bool& needCreate = false);
        
		/************************************************************************/
		/* 获取可选择性
		获取可选择性
		*/
		/************************************************************************/
		virtual bool getSelectable();
        
		/************************************************************************/
		/* 获取可见性
		获取可见性
		*/
		/************************************************************************/
		virtual bool getVisible();

		/************************************************************************/
		/* 设置可见性
		selectable:可见性
		*/
		/************************************************************************/
		virtual void setSelectable(const bool& selectable);

		/************************************************************************/
		/* 设置可见性
		visible:可见性
		*/
		/************************************************************************/
		virtual void setVisible(const bool& visible);

		/************************************************************************/
		/* 加载数据到场景（加载完不渲染），二次开发用户需要实现此接口

		*/
		/************************************************************************/
		virtual bool loadToScene();

		/************************************************************************/
		/* 将加载到场景中数据渲染到场景，二次开发用户需要实现此接口

		*/
		/************************************************************************/
		virtual bool renderToScene();

		/************************************************************************/
		/* 将渲染到场景中的对象从场景图中移除，二次开发用户需要实现此接口

		*/
		/************************************************************************/
		virtual bool deRenderFromScene();

		/************************************************************************/
		/* 将渲染到场景中的对象从内存中卸载，二次开发用户需要实现此接口

		*/
		/************************************************************************/
		virtual bool unLoadFromScene();

		/// <summary>
		/// 同步锁
		/// </summary>
		virtual bool asynLock();

		/// <summary>
		/// 同步解锁 
		/// </summary>
		virtual bool asynUnlock();

		/// <summary>
		/// 获取包围盒 
		/// </summary>
		virtual osg::BoundingBox& getBoundingBox();

		/// <summary>
		/// 设置包围盒 
		/// </summary>
		/// <param name="box">包围盒 </param>
		virtual void setBoundingBox(const osg::BoundingBox& box);

		/// <summary>
		/// 获取包围球 
		/// </summary>
		virtual osg::BoundingSphere& getBoundingSphere();

		/// <summary>
		/// 设置包围球 
		/// </summary>
		/// <param name="box">包围球</param>
		virtual void setBoundingSphere(const osg::BoundingSphere& box);

		/// <summary>
		/// 设置渲染对象位置 
		/// </summary>
		/// <param name="geoPosition">渲染对象位置 </param>
		virtual void setGeoPosition(const osg::Vec3d& geoPosition);

		/// <summary>
		/// 获取渲染对象位置 
		/// </summary>
		virtual osg::Vec3d& getGeoPosition();

		/*
		*主线程调用
		*/
		virtual void findVisibleSceneObject(osg::Camera* pCamera,osg::NodeVisitor* nv);

		/**
		*更新对象
		**/
		virtual void updateSceneObject();

		/// <summary>
		/// 获取几何图形
		/// </summary>
		virtual std::vector<osg::Vec3d>& getGeometry();

		virtual void copyTo(Common::ISceneObject* pDestObject);

		/// <summary>
		/// 获取几何图形最大的点个数
		/// </summary>
		virtual int getMaxGeometryPointNum();
		
		/**
		* 获取风格引用
		**/
		virtual osgEarth::Symbology::Style& getStyle();

		virtual void move(const osg::Vec3d& fromGeoPoint,const osg::Vec3d& toGeoPoint);

		virtual bool contain(const osg::Vec3d& geoPoint);
	protected:
		osg::Vec3d mGeoPosition;
		osg::BoundingSphere mBoundingSphere;
		osg::BoundingBox mBox;
		OpenThreads::Mutex mAsynLock;
		osgEarth::MapNode* mpRefMapNode;
		osg::ref_ptr<osg::LOD> mpLod;
		osgEarth::Symbology::Style mStyle;
		std::vector<osg::Vec3d> mGeometry;
		Common::ISceneObject::SceneObjectState mState;
		int mMaxGeometryPointNum;
		bool mSelectable;
		bool mVisible;
    };
}

#endif  //_ISCENEOBJECT_H
