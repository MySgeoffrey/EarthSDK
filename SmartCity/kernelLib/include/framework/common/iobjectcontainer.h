//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 蚂蚁空间信息平台
//  @ File Name : iobjectcontainer.h
//  @ Date : 2017/8/21
//  @ Author : 
//
//


#if !defined(_IOBJECTCONTAINER_H)
#define _IOBJECTCONTAINER_H

#include "framework/vr_globeframework_global.h"
#include <map>
#include <vector>

// 管线系统容器类，提供数据对象的批量存储与管理功能
//对象由外部创建添加至本容器，对象的生命周期由容器对象来负责
//即：容器对象在析构时会将容器中存在的对象全部释放掉
namespace Common
{
	class IObject;
}
namespace Core
{
	/// <summary>
	/// IObjectContainer类：对象容器
	/// 管线系统容器类，提供数据对象的批量存储与管理功能
	///对象由外部创建添加至本容器，对象的生命周期由容器对象来负责
	///即：容器对象在析构时会将容器中存在的对象全部释放掉
	/// </summary>
	class VR_PIPEFRAMEWORK_EXPORT IObjectContainer
    {
    public:

		/// <summary>
		/// 构造函数
		/// </summary>
		IObjectContainer();

		/// <summary>
		/// 析构函数
		/// </summary>
		virtual ~IObjectContainer();

		/// <summary>
		/// 添加对象
		/// </summary>
		/// <param name="pObject">对象</param>
		virtual bool addObject(Common::IObject* pObject);

		/// <summary>
		/// 获取对象
		/// </summary>
		/// <param name="id">对象id</param>
		virtual Common::IObject* getObject(const std::string& id);

		/// <summary>
		/// 获取对象个数据
		/// </summary>
		virtual int getNumOfObjects();

		/// <summary>
		/// 获取对象key
		/// </summary>
		/// <param name="keys">对象keys返回值</param>
		virtual bool getKeys(std::vector<std::string>& keys);

		/// <summary>
		/// 移除对象
		/// </summary>
		/// <param name="id">对象id</param>
		virtual Common::IObject* removeObject(const std::string& id);

		/// <summary>
		/// 获取所有对象
		/// </summary>
		virtual bool removeAllObjects();

		/// <summary>
		/// 获取并释放所有对象
		/// </summary>
		virtual bool removeAndDestroyAllObjects();

	private:
		typedef std::map<std::string, Common::IObject*> ObjectMap;
		ObjectMap mObjects;
    };
}

#endif  //_IOBJECTCONTAINER_H
