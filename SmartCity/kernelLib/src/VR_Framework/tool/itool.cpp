//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 蚂蚁空间信息平台
//  @ File Name : itool.cpp
//  @ Date : 2017/8/21
//  @ Author : 
//
//


#include "framework/tool/itool.h"

namespace Tool
{
	ITool::ITool()
	{}

	ITool::~ITool()
	{}

	bool ITool::addToolListener(IToolListener* pRefListener)
	{
		if (NULL != pRefListener)
		{
			std::vector<IToolListener*>::iterator bItr = this->mListeners.begin();
			std::vector<IToolListener*>::iterator eItr = this->mListeners.end();
			while (bItr != eItr)
			{
				if (*bItr == pRefListener)
					return false;
				++bItr;
			}
			this->mListeners.push_back(pRefListener);
			return true;
		}
		return false;
	}

	IToolListener* ITool::getToolListener(const int& index)
	{
		return this->mListeners[index];
	}

	bool ITool::removeToolListener(IToolListener* pListener)
	{
		if (NULL != pListener)
		{
			std::vector<IToolListener*>::iterator bItr = this->mListeners.begin();
			std::vector<IToolListener*>::iterator eItr = this->mListeners.end();
			while (bItr != eItr)
			{
				if (*bItr == pListener)
				{
					this->mListeners.erase(bItr);
					return true;
				}
				++bItr;
			}
		}
		return false;
	}

	int ITool::getNumOfListeners()
	{
		return this->mListeners.size();
	}

	void ITool::removeRenderResource()
	{

	}
    
	void ITool::forceListenerEvents(Common::IObject* pResult)
	{
		std::vector<IToolListener*>::iterator bItr = this->mListeners.begin();
		std::vector<IToolListener*>::iterator eItr = this->mListeners.end();
		while (bItr != eItr)
		{
			if (*bItr)
			{
				(*bItr)->onEvent(pResult);
			}
			++bItr;
		}
	}
}
