//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 蚂蚁空间信息平台
//  @ File Name : iobject.cpp
//  @ Date : 2017/8/21
//  @ Author : 
//
//


#include "framework/common/iobject.h"
#include "../igenguid.h"
#include <osgEarth/Registry>

namespace Common
{
	static int s_guid = 1;
	IObject::IObject()
	{
		this->mID = "";
		this->mName = "未命名";
		this->mType = "";
		mGroup = "";
		this->mObjectId = 1;
#if 1
		char guid[256];
		int id = s_guid++;
		sprintf_s(guid, "%d\0", id);
		this->mID = guid;
#else
		this->mID = IGenguid::instance()->createGuid();
#endif
	}

	IObject::~IObject()
	{
		/*if (this->mObjectId != 1)
		{
			if (osgEarth::Registry::objectIndex()->get<Common::IObject>(this->mObjectId))
				osgEarth::Registry::objectIndex()->remove(this->mObjectId);
		}*/
	}

    std::string IObject::getName()
    {
		return this->mName;
    }
    
	std::string IObject::getID()
    {
		return this->mID;
    }
    
	std::string IObject::getType()
    {
		return this->mType;
    }

	void IObject::setType(const std::string& type)
	{
		this->mType = type;
	}
    
	void IObject::setName(const std::string& name)
    {
		this->mName = name;
    }
    
	void IObject::setID(const std::string& id)
    {
		this->mID = id;
    }
    
	std::string IObject::getValueByFieldName(const std::string& fieldName)
	{
		std::map<std::string, std::string>::iterator itr = this->PropertySet.find(fieldName);
		if (itr != this->PropertySet.end())
		{
			return itr->second;
		}
		return "";
	}

	bool IObject::fromConfig(osgEarth::Config& config)
	{
		bool r = false;
		//std::string id = config.child("id").value();
		osgEarth::ConfigSet::iterator propertyBitr = config.children().begin();
		osgEarth::ConfigSet::iterator propertyEitr = config.children().end();
		while (propertyBitr != propertyEitr)
		{
			osgEarth::Config& propertyConfig = *propertyBitr;
			std::string key = propertyConfig.key();
			std::string value = propertyConfig.value();
			this->FieldSet.push_back(key);
			this->PropertySet[key] = value;
			++propertyBitr;
			r = true;
		}
		return r;
	}

	bool IObject::toConfig(osgEarth::Config& config)
	{
		bool r = false;
		for (int i = 0; i < this->FieldSet.size(); ++i)
		{
			std::string fieldName = this->FieldSet.at(i);
			std::string fieldValue = this->getValueByFieldName(fieldName);
			config.update(fieldName, fieldValue);
			r = true;
		}
		return r;
	}

	void IObject::setGroup( const std::string& group )
	{
		mGroup = group;
	}

	std::string IObject::getGroup()
	{
		return mGroup;
	}

}
