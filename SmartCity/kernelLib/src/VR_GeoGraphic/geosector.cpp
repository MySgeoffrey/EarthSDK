//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : cgeosector.cpp
//  @ Date : 2018/7/28
//  @ Author : sgeoffrey
//  @platform:蚂蚁空间信息平台
//


#include "geographic/geosector.h"
#include <osgEarthSymbology/GeometryFactory>
#include <osgEarth/GeoMath>

using namespace osgEarth::Symbology;

namespace Graphic
{
	double computeAzimuth(
		const osg::Vec3d& beginPoint,
		const osg::Vec3d& endPoint)
	{
		double azimuth = osgEarth::GeoMath::bearing(
			beginPoint.y() * 3.1415926/180,
			beginPoint.x() * 3.1415926/180,
			endPoint.y() * 3.1415926/180,
			endPoint.x() * 3.1415926/180);
		azimuth = azimuth * 180 / 3.1415926;//将方位角从弧度转换成角度
		if (azimuth < 0)
		{
			azimuth += 360;
		}
		return azimuth;
	}

	CGeoSector::CGeoSector()
	{
		this->mType = Graphic::GT_SECTOR;
		this->mMaxGeometryPointNum = 3;
	}

	CGeoSector::CGeoSector(osgEarth::MapNode* pRefMapNode)
		:CGeoCircle(pRefMapNode)
	{
		this->mType = Graphic::GT_SECTOR;
		this->mMaxGeometryPointNum = 3;
	}

	CGeoSector::~CGeoSector()
	{
	
	}

	bool CGeoSector::transformRenderGeometry(std::vector<osg::Vec3d>& outRenderGeometry)
	{
		bool r = false;
		double radius = this->getRadius();
		double startAngle = 0;
		double endAngle = 0;
		if (this->getGeometry().size() >= 3)
		{
			radius =  osgEarth::GeoMath::distance(
				this->getGeometry().at(0), this->getGeometry().at(1), this->getMapNode()->getMapSRS());
			double startAngle = computeAzimuth(
				this->getGeometry().at(0),
				this->getGeometry().at(1));
			double endAngle = computeAzimuth(
				this->getGeometry().at(0),
				this->getGeometry().at(2));
			if (endAngle < startAngle)
			{
				std::swap(startAngle,endAngle);
			}
			this->setBeginAngle(startAngle);
			this->setEndAngle(endAngle);
			this->setGeoPosition(this->getGeometry().at(0));
			this->setRadius(radius);
		}
		GeometryFactory factory = GeometryFactory(this->getMapNode()->getMapSRS()->getGeographicSRS());
		osgEarth::Symbology::Geometry* geometry = NULL;
		if (std::abs(this->mEndAngle - this->mBeginAngle) >= 360.0)
		{
			geometry = factory.createCircle(this->getGeoPosition(), this->getRadius(), 0L);
		}
		else
		{
			geometry = factory.createArc(this->getGeoPosition(), this->getRadius(),
				this->mBeginAngle, this->mEndAngle, 0L, 0L, true);
		}
		for (int i = 0; i < geometry->size(); ++i)
		{
			outRenderGeometry.push_back(geometry->at(i));
		}
		delete geometry;
		geometry = NULL;
		r = true;
		return r;
	}
}

