//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : cgeoellipse.cpp
//  @ Date : 2018/7/28
//  @ Author : sgeoffrey
//  @platform:蚂蚁空间信息平台
//


#include "geographic/geoellipse.h"
#include <osgEarthSymbology/GeometryFactory>
#include <osgEarth/GeoMath>
#include "geographic/geoline.h"

using namespace osgEarth::Symbology;

namespace Graphic
{
	CGeoEllipse::CGeoEllipse()
	{
		this->mType = Graphic::GT_ELLIPSE;
		this->mMaxGeometryPointNum = 3;
		this->mRadiusMajor = 1000;
		this->mRadiusMijor = 600;
	}

	CGeoEllipse::CGeoEllipse(osgEarth::MapNode* pRefMapNode)
		:CGeoPolygon(pRefMapNode)
	{
		this->mType = Graphic::GT_ELLIPSE;
		this->mMaxGeometryPointNum = 3;
		this->mRadiusMajor = 10;
		this->mRadiusMijor = 6;
		this->getStyle().getOrCreate<osgEarth::Symbology::LineSymbol>()
			->tessellation() = 1;
		if (this->mpOutLine)
		{
			this->mpOutLine->getStyle().getOrCreate<osgEarth::Symbology::LineSymbol>()
				->tessellation() = 1;
		}
	}

	CGeoEllipse::~CGeoEllipse()
	{
	
	}

	void CGeoEllipse::setRadiusMajor(const double& radiusMajor)
	{
		this->mRadiusMajor = radiusMajor;
	}

	double CGeoEllipse::getRadiusMajor()
	{
		return this->mRadiusMajor;
	}

	void CGeoEllipse::setRadiusMijor(const double& radiusMijor)
	{
		this->mRadiusMijor = radiusMijor;
	}

	double CGeoEllipse::getRadiusMijor()
	{
		return this->mRadiusMijor;
	}

	void CGeoEllipse::updateSceneObject()
	{
		if (this->mpLod == NULL)
		{
			this->loadToScene();
			this->renderToScene();
		}
		CGeoPolygon::updateSceneObject();
	}

	void CGeoEllipse::copyTo(Common::ISceneObject* pDestObject)
	{
		CGeoPolygon::copyTo(pDestObject);
		CGeoEllipse* pEllipse = dynamic_cast<CGeoEllipse*>(pDestObject);
		if (pEllipse)
		{
			pEllipse->setRadiusMajor(this->getRadiusMajor());
			pEllipse->setRadiusMijor(this->getRadiusMijor());
		}
	}
	
	bool CGeoEllipse::transformRenderGeometry(std::vector<osg::Vec3d>& outRenderGeometry)
	{
		bool r = false;
		double radiusMajor = this->getRadiusMajor();
		double radiusMijor = this->getRadiusMijor();
		if (this->getGeometry().size() >= 3)
		{
			osg::Vec3d center = this->getGeometry().at(0);
			osg::Vec3d colPos(this->getGeometry().at(1).x(),center.y(),this->getGeometry().at(1).z());
			osg::Vec3d rowPos(center.x(),this->getGeometry().at(2).y(),this->getGeometry().at(2).z());
			radiusMajor =  osgEarth::GeoMath::distance(
				center, colPos, this->getMapNode()->getMapSRS());
			radiusMijor =  osgEarth::GeoMath::distance(
				center, rowPos, this->getMapNode()->getMapSRS());
			this->setGeoPosition(center);
		}
		GeometryFactory factory = GeometryFactory(this->getMapNode()->getMapSRS()->getGeographicSRS());
		osgEarth::Symbology::Geometry* geometry = factory.createEllipse(
			this->getGeoPosition(), radiusMajor,radiusMijor, 90);
		for (int i = 0; i < geometry->size(); ++i)
		{
			outRenderGeometry.push_back(geometry->at(i));
		}
		delete geometry;
		geometry = NULL;
		r = true;
		return r;
	}


}


