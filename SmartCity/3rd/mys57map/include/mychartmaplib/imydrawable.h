//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : MyS57Chart
//  @ File Name : imydrawable.h
//  @ Date : 2017/10/20
//  @ Author : sgeoffrey
//
//


#if !defined(_IMYDRAWABLE_H)
#define _IMYDRAWABLE_H

#include "mychartmaplib/mychartmaplib_global.h"
#include <QtGui/qpixmap.h>
#include "ogr_core.h"
#include "mychartcommonlib/mychartcoorsystem.h"
#include "mychartcommonlib/mygeoobject.h"

namespace MyChart
{
	/// <summary>
	/// 地图场景操作工具
	/// </summary>
	class MYCHARTMAPLIB_EXPORT IMyTool
	{
	public:
		/// <summary>
		/// 构造函数
		/// </summary>
		IMyTool(){};

		/// <summary>
		/// 析构函数
		/// </summary>
		virtual ~IMyTool(){};

		/// <summary>
		/// 事件处理之前的回调接口（子类重写）
		/// </summary>
		/// <param name="evt">正在发生的事件</param>
		virtual bool onBeforeEvent(QEvent* evt) = 0;

		/// <summary>
		/// 事件处理之后的回调接口（子类重写）
		/// </summary>
		/// <param name="evt">正在发生的事件</param>
		virtual bool onAfterEvent(QEvent* evt) = 0;

		/// <summary>
		/// 绘制事件处理之前的回调接口（子类重写）
		/// </summary>
		/// <param name="evt">正在发生的事件</param>
		virtual bool onBeforePaintEvent(IMyDrawArgs* pArgs) = 0;

		/// <summary>
		/// 绘制事件处理之后的回调接口（子类重写）
		/// </summary>
		/// <param name="evt">正在发生的事件</param>
		virtual bool onAfterPaintEvent(IMyDrawArgs* pArgs) = 0;
	};

	/// <summary>
	/// 坐标转换类
	/// </summary>
	class MYCHARTMAPLIB_EXPORT IMyCoorTransformer
	{
	public:
		/// <summary>
		/// 构造函数
		/// </summary>
		IMyCoorTransformer();

		/// <summary>
		/// 析构函数
		/// </summary>
		virtual ~IMyCoorTransformer();

		/// <summary>
		/// 地理坐标转投影坐标
		/// </summary>
		/// <param name="geoLon">地理经度</param>
		/// <param name="geoLat">地理纬度</param>
		/// <param name="prjX">投影后X坐标</param>
		/// <param name="prjY">投影后Y坐标</param>
		/// <param name="prjCoorsystem">投影坐标系统类型</param>
		static void geoCoor2PrjCoor(const double& geoLon,const double& geoLat,
			double& prjX,double& prjY,
			const MyChart::EMyCoorsystemType& prjCoorsystem);

		/// <summary>
		/// 投影坐标转地理坐标
		/// </summary>
		/// <param name="prjX">X坐标</param>
		/// <param name="prjY">Y坐标</param>
		/// <param name="geoLon">地理经度</param>
		/// <param name="geoLat">地理纬度</param>
		/// <param name="prjCoorsystem">投影坐标系统类型</param>
		static void prjCoor2GeoCoor(const double& prjX,const double& prjY,
			double& geoLon,double& geoLat,
			const MyChart::EMyCoorsystemType& prjCoorsystem);

		/// <summary>
		/// 坐标换算
		/// </summary>
		/// <param name="geoX">地理经度</param>
		/// <param name="geoY">地理纬度</param>
		/// <param name="screenX">屏幕X坐标</param>
		/// <param name="screenY">屏幕Y坐标</param>
		/// <param name="pDrawArgs">绘制参数</param>
		static void transform(const double& geoX,const double& geoY,
			double& screenX,double& screenY,
			IMyDrawArgs* pDrawArgs);

		static void prj2ScreenCoor(const double& prjX,const double& prjY,
			double& screenX,double& screenY,
			IMyDrawArgs* pDrawArgs);

		/// <summary>
		/// 经纬度转墨卡托坐标
		/// </summary>
		/// <param name="geoX">地理经度</param>
		/// <param name="geoY">地理纬度</param>
		/// <param name="mecatorX">墨卡托X坐标</param>
		/// <param name="mecatorY">墨卡托Y坐标</param>
		static void lonLat2Mercator(const double& geoX,const double& geoY,
			double& mecatorX,double& mecatorY);

		/// <summary>
		/// 墨卡托坐标转经纬度
		/// </summary>
		/// <param name="mecatorX">墨卡托X坐标</param>
		/// <param name="mecatorY">墨卡托Y坐标</param>
		/// <param name="geoX">地理经度</param>
		/// <param name="geoY">地理纬度</param>
		static void mercator2lonLat(const double& mecatorX,const double& mecatorY,
			 double& geoX,double& geoY);
	};

	/// <summary>
	/// 可绘制对象
	/// </summary>
	class MYCHARTMAPLIB_EXPORT IMyDrawable {
	public:
		/// <summary>
		/// 构造函数
		/// </summary>
		IMyDrawable();

		/// <summary>
		/// 析构函数
		/// </summary>
		virtual ~IMyDrawable();

		/// <summary>
		/// 获取可见性
		/// </summary>
		/// <returns>可见性</returns>
		virtual bool getVisible();

		/// <summary>
		/// 设置可见性
		/// </summary>
		/// <param name="visible">可见性</param>
		virtual void setVisible(const bool& visible);

		/// <summary>
		/// 获取可绘制对象最新绘制的位图（子类需要重写）
		/// </summary>
		/// <returns>位图</returns>
		virtual QPixmap& getImage() = 0;

		/// <summary>
		/// 绘制
		/// </summary>
		/// <param name="pArgs">绘制参数（子类需要重写）</param>
		virtual bool draw(IMyDrawArgs* pArgs) = 0;

	private:
		bool mVisible;
	};
}
#endif  //_IMYDRAWABLE_H
