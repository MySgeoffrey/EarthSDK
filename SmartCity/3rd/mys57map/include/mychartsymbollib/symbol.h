//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : MyS57Chart
//  @ File Name : csymbol.h
//  @ Date : 2017/9/27
//  @ Author : sgeoffrey
//
//


#if !defined(_CSYMBOL_H)
#define _CSYMBOL_H

#include "mychartsymbollib/mychartsymbollib_global.h"
#include "mychartsymbollib/rleobject.h"
#include <map>
#include <QtGui/QPixmap>
#include <QtGui/QImage>
#include <QtGui/QPaintDevice>
#include <QtGui/QColor>
#include <QtCore/QPoint>

namespace MyChart
{
	class CColorTable;
	class CColorRecord;
	/// <summary>
	/// 基础符号类
	/// </summary>
	class MYCHARTSYMBOLLIB_EXPORT CSymbol : public CRleObject
	{
	public:
		/// <summary>
		/// 构造函数
		/// </summary>
		CSymbol();

		/// <summary>
		/// 析构函数
		/// </summary>
		virtual ~CSymbol();

		/// <summary>
		/// 获取当前风格图片
		/// </summary>
		/// <returns>风格图片</returns>
		QImage image();

		/// <summary>
		/// 获取位图字符串符号数据
		/// </summary>
		/// <returns>字符串符号数据</returns>
		QString bitmapData()
		{
			return this->_symboldata;
		}

		/// <summary>
		/// 向位图字符串符号数据中追加行数据
		/// </summary>
		/// <param name="line">行数据</param>
		void addLine(QString line)
		{
			_symboldata.append("\n" + line);
		}

		/// <summary>
		/// 获取颜色表代码
		/// </summary>
		/// <returns>颜色表代码</returns>
		QString getColorOfSymbol();//colortable颜色表;

		/// <summary>
		/// 修改颜色表
		/// </summary>
		/// <param name="colortable">颜色表</param>
		void changeColorTable(CColorTable* colortable);

		QImage getZoomedImage(int zoomLevel, bool showGrid);

		QImage getVectorRendering(CColorTable* colortable);

		void getSymbolRendering(CColorTable* colortable,QPainter* graphic);

		QImage getAPVectorSymbol(CColorTable* colortable);//colortable颜色表

		void drawComplexVectorLine(CColorTable* colortable, QPainter* graphic);//colortable颜色表

		void drawComplexPath(CColorTable* colortable, QPainter* graphic,int n);//colortable颜色表

		QPoint getDirectionFromCenterToPivot();

		void changePixel(int x, int y, QString colorcode);

		static void renderSquare(QImage& image, int x, int y, int size, QColor color, bool border);

	public:
		static const char TransparentChar ;

		static const QString ObjectType ;

		CColorTable* ColorTable;

		int DistanceAP;

		int DistaceLinear;

		QString Code;

		QString Description;
		char SymbolType;
		int OffsetX;
		int OffsetY;
		int Width;
		int Height;
		int HotspotX;
		int HotspotY;
		std::map<char, CColorRecord*> Colors;

	private :
		QString _symboldata;
	};
}
#endif  //_CSYMBOL_H
